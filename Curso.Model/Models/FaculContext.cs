// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace Curso.Model.Models
{
    public partial class FaculContext : DbContext
    {
        public FaculContext()
        {
        }

        public FaculContext(DbContextOptions<FaculContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Aluno> Aluno { get; set; }
        public virtual DbSet<Aula> Aula { get; set; }
        public virtual DbSet<Cliente> Cliente { get; set; }
        public virtual DbSet<Hospedagem> Hospedagem { get; set; }
        public virtual DbSet<Medicamentos> Medicamentos { get; set; }
        public virtual DbSet<Pet> Pet { get; set; }
        public virtual DbSet<PlanoHospedagem> PlanoHospedagem { get; set; }
        public virtual DbSet<ServicoHospedagem> ServicoHospedagem { get; set; }


        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
                optionsBuilder.UseSqlServer("Data Source=DXPX\\SQLEXPRESS;Initial Catalog=Facul;Integrated Security = True;User ID=Usuario;Password=fac123;Encrypt=false;TrustServerCertificate=false");
            }
        }


        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Aluno>(entity =>
            {
                entity.HasKey(e => e.Matricula)
                    .HasName("PK__Aluno__0FB9FB4E50B09D51");

                entity.Property(e => e.Matricula)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Nome)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Aula>(entity =>
            {
                entity.HasKey(e => e.Codigo)
                    .HasName("PK__Aula__06370DAD281F8BF9");

                entity.Property(e => e.Nome)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Cliente>(entity =>
            {
                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Cpf)
                    .HasMaxLength(11)
                    .IsUnicode(false)
                    .HasColumnName("CPF");

                entity.Property(e => e.Email)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Endereco)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Nome)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Hospedagem>(entity =>
            {
                entity.HasIndex(e => e.IdPet, "Hospedagem_FKIndex1");

                entity.HasIndex(e => e.IdPlanoHospedagem, "Hospedagem_FKIndex2");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.DataEfetivaSaida).HasPrecision(0);

                entity.Property(e => e.DataEntrada).HasPrecision(0);

                entity.Property(e => e.DataPrevistaSaida).HasPrecision(0);

                entity.Property(e => e.Fechado)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.IdPet).HasColumnName("idPet");

                entity.Property(e => e.IdPlanoHospedagem).HasColumnName("idPlanoHospedagem");

                entity.Property(e => e.Observacao)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Tratamento)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ValorAdiantamento).HasColumnType("money");

                entity.Property(e => e.ValorPrevisto).HasColumnType("money");

                entity.Property(e => e.ValorReal).HasColumnType("money");
            });

            modelBuilder.Entity<Medicamentos>(entity =>
            {
                entity.HasIndex(e => e.IdHospedagem, "Medicamentos_FKIndex1");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.DataAplicacao).HasPrecision(0);

                entity.Property(e => e.Descricao)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.IdHospedagem).HasColumnName("idHospedagem");
            });

            modelBuilder.Entity<Pet>(entity =>
            {
                entity.ToTable("PET");

                entity.HasIndex(e => e.IdRaca, "PET_FKIndex1");

                entity.HasIndex(e => e.IdCliente, "PET_FKIndex2");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.IdCliente).HasColumnName("idCliente");

                entity.Property(e => e.IdRaca).HasColumnName("idRaca");

                entity.Property(e => e.Nome)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Sexo)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Tipo)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .IsFixedLength();
            });

            modelBuilder.Entity<PlanoHospedagem>(entity =>
            {
                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Descricao)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Nome)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ValorDiaria).HasColumnType("money");
            });

            modelBuilder.Entity<ServicoHospedagem>(entity =>
            {
                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.IdHospedagem).HasColumnName("idHospedagem");

                entity.Property(e => e.IdServico).HasColumnName("idServico");

                entity.Property(e => e.ValorTotal).HasColumnType("money");

                entity.Property(e => e.ValorUnitario).HasColumnType("money");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}